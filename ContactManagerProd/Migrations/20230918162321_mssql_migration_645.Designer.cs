// <auto-generated />
using System;
using ContactManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactManagerProd.Migrations
{
    [DbContext(typeof(ContactManagerContext))]
    [Migration("20230918162321_mssql_migration_645")]
    partial class mssql_migration_645
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactManager.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<int?>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UnitNumber")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("BusinessID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ContactManager.Models.AddressPerson", b =>
                {
                    b.Property<int>("AddressPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressPersonID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("AddressPersonID");

                    b.HasIndex("AddressID");

                    b.HasIndex("PersonID");

                    b.ToTable("AddressPerson");
                });

            modelBuilder.Entity("ContactManager.Models.Business", b =>
                {
                    b.Property<int>("BusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessID"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessID");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ContactManager.Models.BusinessPerson", b =>
                {
                    b.Property<int>("BusinessPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessPersonID"));

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("BusinessPersonID");

                    b.HasIndex("BusinessID");

                    b.HasIndex("PersonID");

                    b.ToTable("BusinessPerson");
                });

            modelBuilder.Entity("ContactManager.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ContactManager.Models.Address", b =>
                {
                    b.HasOne("ContactManager.Models.Business", "Business")
                        .WithMany("Addresses")
                        .HasForeignKey("BusinessID");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("ContactManager.Models.AddressPerson", b =>
                {
                    b.HasOne("ContactManager.Models.Address", "Address")
                        .WithMany("AddressPeople")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManager.Models.Person", "Person")
                        .WithMany("AddressPeople")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ContactManager.Models.BusinessPerson", b =>
                {
                    b.HasOne("ContactManager.Models.Business", "Business")
                        .WithMany("BusinessPeople")
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManager.Models.Person", "Person")
                        .WithMany("BusinessPeople")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ContactManager.Models.Address", b =>
                {
                    b.Navigation("AddressPeople");
                });

            modelBuilder.Entity("ContactManager.Models.Business", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BusinessPeople");
                });

            modelBuilder.Entity("ContactManager.Models.Person", b =>
                {
                    b.Navigation("AddressPeople");

                    b.Navigation("BusinessPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
